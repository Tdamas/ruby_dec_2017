Ruby on Rails installation for virtual machine
1. https://www.virtualbox.org/wiki/Downloads
  - to install Oracle VM VirtualBox

2. https://www.vagrantup.com/downloads.html
  - to install vagrant for your operating system.

The first vagrant command that we are going to learn is vagrant init. This built-in command will
create something called a Vagrantfile. This file is what Vagrant uses to configure our virtual machines.
Let's create a directory and run the init command.
- I recommend you create a Ruby folder to house all of your ruby projects and your vagrant machine.

$ mkdir Ruby
$ cd Ruby
$ mkdir first_vagrant_box
$ cd first_vagrant_box
$ vagrant init // this command put your Vagrantfile into this directory

Instead of installing virtual machines from scratch every time, Vagrant uses a base image system to quickly
make copies of any virtual machine. These images are called Vagrant "boxes". Vagrant has a whole catalog of
public boxes that we can download. You can visit at HashiCorp's Atlas catalog. Let's add the ubuntu/trusty64
box to our computer.

$ vagrant box add ubuntu/trusty64 // This command downloads that box from the catalog and saves it globally. This may take some time. (5min)
$ vagrant box list // To see a list of your boxes you can run this command

Next, we will configure our Vagrantfile to use the box that we just downloaded. Open the Vagrantfile and let's
configure our virtual machine to boot up with our ubuntu box.

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
end

So far, we have done a couple things.
- Downloaded an ubuntu image.
- Initialized a directory with a Vagrantfile that uses that image.

Next, we have to actually spin up that image into a running virtual machine. In your console, run:
$ vagrant up

Once the VM is up and running, we can ssh into it.
$ vagrant ssh // This command allows you to ssh into your virtual machine and interact with it.

Synced Folder
Everything is great so far, but how do we actually develop with our VM. Unless you are an expert in terminal editors
such as VIM or Nano, writing code in your VMs does not seem like fun. So, Vagrant comes with a synced folder functionality.
While you are ssh'ed into your VM, run:

vagrant@vagrant-ubuntu-trusty-64:~$ cd /vagrant
vagrant@vagrant-ubuntu-trusty-64:~$ ls
Vagrantfile

//////////////  We are going to learn how to install Ruby and Rails with our VMs, Vagrant style. //////////////
Make sure you have exited the virtual environment
$ cd first_vagrant_box
$ touch bootstrap.sh
Open bootstrap.sh and copy and paste the following commands:

#!/usr/bin/env bash
# upgrade and update the system
echo upgrading and updating the system
sudo apt-get update
sudo apt-get -y upgrade
# install node.js for js runtime when using Rails
echo installing nodejs for ExecJS runtime and git
sudo apt-get install -y nodejs
sudo apt-get install -y git
# install RVM
echo installing RVM
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
\curl -sSL https://get.rvm.io | bash -s stable
source /home/vagrant/.rvm/scripts/rvm
rvm requirements
# install Ruby and make 2.3.1 the default
echo installing ruby
rvm install 2.3.1
rvm use 2.3.1 --default
# install Bundler and Rails
echo installing bundler and rails
gem install bundler --no-ri --no-rdoc
gem install rails -v 4.2.7 --no-ri --no-rdoc
# install postgres and its dependencies
echo installing psql and its dependencies
sudo apt-get install -y postgresql postgresql-contrib libpq-devcopy

Now, we must edit our Vagrantfile so that it uses our provision.
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.provision :shell, path: "bootstrap.sh", privileged: false
end

Next, we will add a couple of lines in our Vagrant file to customize our machine even further. We are going to let our machine
use 2 GBs of memory with 2 cpus.
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1"
  config.vm.provision :shell, path: "bootstrap.sh", privileged: false
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", "2048"]
    vb.customize ["modifyvm", :id, "--cpus", "2"]
  end
end

//////////////////////   Halt and Provision   ////////////////////////
Since we have made changes in our configuration and added provision, we must halt the machine and run the vagrant up command with a special flag.
While you are in the first_vagrant_box directory, run the following in your terminal:

$ vagrant halt
==> default: Attempting graceful shutdown of VM...
$ vagrant up --provision

Halt will shut down your machine, and the --provision flag will make sure to install everything that we have in the bootstrap.sh file.
Once all the installation is done, your machine will be ready to use.

Congratulations, we have installed Ruby and Rails in our vagrant VM. To check that everything is installed, vagrant ssh into your machine and run:
vagrant@vagrant-ubuntu-trusty-64:~$ ruby -v
ruby 2.3.1
vagrant@vagrant-ubuntu-trusty-64:~$ rails -v
Rails 4.2.7 // if rails is not install on your machine, simply type:
$ sudo gem install rails // This could take a while
